<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gerar Token</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="/css/styles.css" rel="stylesheet">

    <style>
        .navbar {
            background-color: #343a40;
            /* Cor de fundo escura */
        }

        .navbar .nav-link {
            color: #fff;
            /* Cor do texto branco */
            background-color: #007bff;
            /* Cor de fundo azul */
            border-radius: 5px;
            margin-left: 1px;
            margin-top: 5px;
            padding: 5px 10px;
            transition: background-color 0.3s, color 0.3s;
        }

        .navbar .nav-link:hover {
            background-color: #0056b3;
            /* Cor de fundo azul escuro */
            color: #fff;
            /* Cor do texto branco */
        }

        .navbar .nav-item+.nav-item {
            margin-left: 10px;
        }

        .navbar-brand {
            font-weight: bold;
            color: #fff;
        }

        .card-header {
            background-color: #007bff;
            color: #fff;
            font-weight: bold;
            text-align: center;
        }

        .btn-primary {
            background-color: #007bff;
            border-color: #007bff;
        }

        .btn-primary:hover {
            background-color: #0056b3;
            border-color: #0056b3;
        }

        .btn-warning {
            background-color: #ffc107;
            border-color: #ffc107;
        }

        .btn-warning:hover {
            background-color: #e0a800;
            border-color: #d39e00;
        }

        .btn-danger {
            background-color: #dc3545;
            border-color: #dc3545;
        }

        .btn-danger:hover {
            background-color: #c82333;
            border-color: #bd2130;
        }

        .table-striped tbody tr:nth-of-type(odd) {
            background-color: rgba(0, 0, 0, 0.05);
            /* Cor de fundo listrada */
        }

        .container {
            max-width: 900px;
            margin-top: 30px;
        }

        h1 {
            text-align: center;
            margin-bottom: 20px;
        }
    </style>
</head>

<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark border-bottom">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">Backup to GDrive</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
                aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="/">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/credentials">Configurar Credenciais</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/generate-token">Gerar Token</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#" id="toggle-backup">
                            <span id="backup-status">
                                <%= isBackupEnabled ? "Desativar Backup" : "Ativar Backup" %>
                            </span>
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/logout">Sair</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>
    <div class="container mt-4">
        <div class="row justify-content-center">
            <div class="col-lg-6">
                <div class="card">
                    <div class="card-header text-center">
                        <h2>Gerar Token</h2>
                    </div>
                    <div class="card-body text-center">
                        <% if (isAuthorized) { %>
                            <p class="text-success">Você já está autorizado!</p>
                            <button class="btn btn-danger" id="revoke-token">Excluir Autorização</button>
                            <% } else if (authUrl) { %>
                                <p>Para autorizar o acesso ao Google Drive, clique no botão abaixo:</p>
                                <a class="btn btn-primary" href="<%= authUrl %>">Autorizar acesso</a>
                                <% } %>
                    </div>
                    <% if (isAuthorized) { %>
                        <div class="card-footer text-center">
                            <small class="text-muted">Se desejar, você pode revogar a autorização a qualquer
                                momento.</small>
                        </div>
                        <% } %>
                </div>
            </div>
        </div>
    </div>


    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Função para exibir alertas
            function showAlert(type, message) {
                Swal.fire(type === 'success' ? 'Sucesso' : 'Erro', message, type);
            }

            // Função para enviar requisições e tratar respostas
            async function sendRequest(url, method, data) {
                const response = await fetch(url, {
                    method: method,
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });

                return response.json();
            }

            // Função para criar um cron job
            async function createCron(cronExpression) {
                const data = { schedule: cronExpression };
                const result = await sendRequest('/create-cron', 'POST', data);

                if (result.success) {
                    showAlert('success', result.message);
                    fetchCurrentCron();
                } else {
                    showAlert('error', result.message);
                }
            }

            // Função para editar um cron job
            async function editCron(cronExpression) {
                const data = { schedule: cronExpression };
                const result = await sendRequest('/edit-cron/' + document.getElementById('current-cron-id').value, 'PUT', data);

                if (result.success) {
                    showAlert('success', result.message);
                    fetchCurrentCron();
                } else {
                    showAlert('error', result.message);
                }
            }

            // Função para deletar um cron job
            async function deleteCron() {
                const result = await sendRequest('/delete-cron/' + document.getElementById('current-cron-id').value, 'DELETE');

                if (result.success) {
                    showAlert('success', result.message);
                    fetchCurrentCron();
                } else {
                    showAlert('error', result.message);
                }
            }

            // Função para buscar o cron job atual
            async function fetchCurrentCron() {
                const response = await fetch('/get-crons');
                const result = await response.json();

                const cronExpressionElement = document.getElementById('current-cron-expression');
                const currentCronIdElement = document.getElementById('current-cron-id');
                const createCronSection = document.getElementById('create-cron-section');

                if (Object.keys(result).length > 0) {
                    const cronId = Object.keys(result)[0];
                    cronExpressionElement.innerText = result[cronId].schedule;
                    currentCronIdElement.value = cronId;
                    createCronSection.style.display = 'none';
                } else {
                    cronExpressionElement.innerText = 'Nenhuma expressão Cron encontrada.';
                    currentCronIdElement.value = '';
                    createCronSection.style.display = 'block';
                }
            }

            // Função para ativar/desativar backup
            async function toggleBackup() {
                const isCurrentlyEnabled = document.getElementById('backup-status').innerText === 'Desativar Backup';
                const loadingMessage = isCurrentlyEnabled ? 'Aguarde, estamos desativando o backup...' : 'Aguarde, estamos ativando o backup...';

                // Exibir spinner de carregamento
                Swal.fire({
                    title: 'Aguarde',
                    text: loadingMessage,
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                const result = await sendRequest('/toggle-backup', 'POST');

                Swal.close(); // Fechar o spinner de carregamento

                if (result.success) {
                    document.getElementById('backup-status').innerText = result.isBackupEnabled ? 'Desativar Backup' : 'Ativar Backup';
                    showAlert('success', result.message);
                } else {
                    showAlert('error', result.message);
                }
            }

            // Função para revogar o token
            async function revokeToken() {
                const result = await sendRequest('/revoke-token', 'POST');

                if (result.success) {
                    showAlert('success', result.message);
                    window.location.reload();
                } else {
                    showAlert('error', result.message);
                }
            }

            // Botão para revogar token
            const revokeTokenButton = document.getElementById('revoke-token');
            if (revokeTokenButton) {
                revokeTokenButton.addEventListener('click', function () {
                    revokeToken();
                });
            }

            // Formulário de criação de cron job
            const createForm = document.getElementById('create-form');
            if (createForm) {
                createForm.addEventListener('submit', function (event) {
                    event.preventDefault();
                    const cronExpression = document.getElementById('create_cron_expression').value;
                    createCron(cronExpression);
                });
            }

            // Formulário de edição de cron job
            const editForm = document.getElementById('edit-form');
            if (editForm) {
                editForm.addEventListener('submit', function (event) {
                    event.preventDefault();
                    const cronExpression = document.getElementById('edit_cron_expression').value;
                    editCron(cronExpression);
                });
            }

            // Botão de deletar cron job
            const deleteButton = document.getElementById('delete-cron');
            if (deleteButton) {
                deleteButton.addEventListener('click', function () {
                    Swal.fire({
                        title: 'Tem certeza?',
                        text: 'Você não poderá reverter isso!',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Sim, exclua!'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            deleteCron();
                        }
                    });
                });
            }

            // Botão de ativar/desativar backup
            const toggleBackupButton = document.getElementById('toggle-backup');
            if (toggleBackupButton) {
                toggleBackupButton.addEventListener('click', function () {
                    toggleBackup();
                });
            }

            // Buscar cron job atual ao carregar a página
            fetchCurrentCron();
        });
    </script>
</body>

</html>